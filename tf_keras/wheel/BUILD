# Copyright 2025 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@local_config_cuda//cuda:build_defs.bzl", "if_cuda")
load("@python_version_repo//:py_version.bzl", "REQUIREMENTS")
load("@tf_keras_wheel//:wheel.bzl", "WHEEL_VERSION")
load("@tf_keras_wheel_version_suffix//:wheel_version_suffix.bzl", "WHEEL_VERSION_SUFFIX")
load(
    "@xla//third_party/py:py_import.bzl",
    "py_import",
)
load("@xla//third_party/py:python_wheel.bzl", "transitive_py_deps")
load(
    "//tf_keras/wheel:wheel.bzl",
    "get_pypi_tensorflow_dep",
    "get_pypi_tensorflow_pkg",
    "get_pypi_tf_keras_wheel",
    "tf_keras_source_package",
    "tf_keras_wheel",
    "wheel_sources",
)

string_flag(
    name = "output_path",
    build_setting_default = "dist",
)

py_binary(
    name = "build_wheel_py",
    srcs = [
        "build_wheel.py",
    ],
    main = "build_wheel.py",
    deps = [
        ":wheel_sources_library",
        "@pypi//build",
    ] + [get_pypi_tensorflow_dep()],
)

py_binary(
    name = "create_wheel_dir_py",
    srcs = ["create_wheel_dir.py"],
    main = "create_wheel_dir.py",
)

transitive_py_deps(
    name = "transitive_py_deps",
    deps = [
        "//tf_keras",
        "//tf_keras:activations",
        "//tf_keras:backend",
        "//tf_keras:backend_config",
        "//tf_keras:base_layer",
        "//tf_keras:callbacks",
        "//tf_keras:callbacks_v1",
        "//tf_keras:constraints",
        "//tf_keras:engine",
        "//tf_keras:losses",
        "//tf_keras:regularizers",
        "//tf_keras/api:tf_keras_api",
        "//tf_keras/applications",
        "//tf_keras/benchmarks:benchmark_util",
        "//tf_keras/benchmarks:distribution_util",
        "//tf_keras/benchmarks:keras_benchmark_lib_pip",
        "//tf_keras/benchmarks:model_memory_profile",
        "//tf_keras/benchmarks:profiler_lib",
        "//tf_keras/benchmarks/saved_model_benchmarks:saved_model_benchmark_util",
        "//tf_keras/datasets",
        "//tf_keras/distribute",
        "//tf_keras/distribute:dataset_creator_model_fit_test_base",
        "//tf_keras/distribute:distribute_coordinator_utils",
        "//tf_keras/distribute:distribute_strategy_test_lib",
        "//tf_keras/distribute:distribute_test_lib_pip",
        "//tf_keras/distribute:distributed_file_utils",
        "//tf_keras/distribute:keras_correctness_test_lib",
        "//tf_keras/distribute:keras_test_lib",
        "//tf_keras/distribute:model_collection_base",
        "//tf_keras/distribute:model_combinations",
        "//tf_keras/distribute:multi_worker_testing_utils",
        "//tf_keras/distribute:optimizer_combinations",
        "//tf_keras/distribute:saved_model_test_base",
        "//tf_keras/distribute:simple_models",
        "//tf_keras/distribute:strategy_combinations",
        "//tf_keras/distribute:test_example",
        "//tf_keras/distribute:tpu_strategy_test_utils",
        "//tf_keras/distribute:worker_training_state",
        "//tf_keras/dtensor",
        "//tf_keras/dtensor:integration_test_utils",
        "//tf_keras/dtensor:layout_map",
        "//tf_keras/dtensor:lazy_variable",
        "//tf_keras/dtensor:test_util",
        "//tf_keras/dtensor:utils",
        "//tf_keras/engine",
        "//tf_keras/engine:base_layer",
        "//tf_keras/engine:base_layer_utils",
        "//tf_keras/engine:base_preprocessing_layer",
        "//tf_keras/engine:data_adapter",
        "//tf_keras/engine:functional_utils",
        "//tf_keras/engine:input_layer",
        "//tf_keras/engine:input_spec",
        "//tf_keras/engine:keras_tensor",
        "//tf_keras/engine:node",
        "//tf_keras/estimator",
        "//tf_keras/export:export_lib",
        "//tf_keras/feature_column",
        "//tf_keras/feature_column:base_feature_layer",
        "//tf_keras/feature_column:dense_features",
        "//tf_keras/feature_column:dense_features_v2",
        "//tf_keras/feature_column:sequence_feature_column",
        "//tf_keras/initializers",
        "//tf_keras/integration_test:preprocessing_test_utils",
        "//tf_keras/integration_test/models",
        "//tf_keras/layers",
        "//tf_keras/layers:kernelized",
        "//tf_keras/layers:noise",
        "//tf_keras/layers/activation",
        "//tf_keras/layers/activation:elu",
        "//tf_keras/layers/activation:leaky_relu",
        "//tf_keras/layers/activation:prelu",
        "//tf_keras/layers/activation:relu",
        "//tf_keras/layers/activation:softmax",
        "//tf_keras/layers/activation:thresholded_relu",
        "//tf_keras/layers/attention",
        "//tf_keras/layers/attention:additive_attention",
        "//tf_keras/layers/attention:attention_layer",
        "//tf_keras/layers/attention:base_dense_attention",
        "//tf_keras/layers/attention:multi_head_attention",
        "//tf_keras/layers/core",
        "//tf_keras/layers/core:activation",
        "//tf_keras/layers/core:dense",
        "//tf_keras/layers/core:einsum_dense",
        "//tf_keras/layers/core:embedding",
        "//tf_keras/layers/core:identity",
        "//tf_keras/layers/core:lambda",
        "//tf_keras/layers/core:masking",
        "//tf_keras/layers/core:tf_op_layer",
        "//tf_keras/layers/experimental:dynamic_embedding",
        "//tf_keras/layers/experimental:dynamic_lookup",
        "//tf_keras/layers/locally_connected",
        "//tf_keras/layers/locally_connected:locally_connected1d",
        "//tf_keras/layers/locally_connected:locally_connected2d",
        "//tf_keras/layers/locally_connected:locally_connected_utils",
        "//tf_keras/layers/merging",
        "//tf_keras/layers/merging:add",
        "//tf_keras/layers/merging:average",
        "//tf_keras/layers/merging:base_merge",
        "//tf_keras/layers/merging:concatenate",
        "//tf_keras/layers/merging:dot",
        "//tf_keras/layers/merging:maximum",
        "//tf_keras/layers/merging:minimum",
        "//tf_keras/layers/merging:multiply",
        "//tf_keras/layers/merging:subtract",
        "//tf_keras/layers/normalization",
        "//tf_keras/layers/normalization:batch_normalization",
        "//tf_keras/layers/normalization:batch_normalization_v1",
        "//tf_keras/layers/normalization:group_normalization",
        "//tf_keras/layers/normalization:layer_normalization",
        "//tf_keras/layers/normalization:spectral_normalization",
        "//tf_keras/layers/normalization:unit_normalization",
        "//tf_keras/layers/pooling",
        "//tf_keras/layers/pooling:average_pooling1d",
        "//tf_keras/layers/pooling:average_pooling2d",
        "//tf_keras/layers/pooling:average_pooling3d",
        "//tf_keras/layers/pooling:base_global_pooling1d",
        "//tf_keras/layers/pooling:base_global_pooling2d",
        "//tf_keras/layers/pooling:base_global_pooling3d",
        "//tf_keras/layers/pooling:base_pooling1d",
        "//tf_keras/layers/pooling:base_pooling2d",
        "//tf_keras/layers/pooling:base_pooling3d",
        "//tf_keras/layers/pooling:global_average_pooling1d",
        "//tf_keras/layers/pooling:global_average_pooling2d",
        "//tf_keras/layers/pooling:global_average_pooling3d",
        "//tf_keras/layers/pooling:global_max_pooling1d",
        "//tf_keras/layers/pooling:global_max_pooling2d",
        "//tf_keras/layers/pooling:global_max_pooling3d",
        "//tf_keras/layers/pooling:max_pooling1d",
        "//tf_keras/layers/pooling:max_pooling2d",
        "//tf_keras/layers/pooling:max_pooling3d",
        "//tf_keras/layers/preprocessing",
        "//tf_keras/layers/preprocessing:category_encoding",
        "//tf_keras/layers/preprocessing:discretization",
        "//tf_keras/layers/preprocessing:hashed_crossing",
        "//tf_keras/layers/preprocessing:hashing",
        "//tf_keras/layers/preprocessing:image_preprocessing",
        "//tf_keras/layers/preprocessing:index_lookup",
        "//tf_keras/layers/preprocessing:integer_lookup",
        "//tf_keras/layers/preprocessing:normalization",
        "//tf_keras/layers/preprocessing:preprocessing_stage",
        "//tf_keras/layers/preprocessing:preprocessing_test_utils",
        "//tf_keras/layers/preprocessing:preprocessing_utils",
        "//tf_keras/layers/preprocessing:string_lookup",
        "//tf_keras/layers/preprocessing:text_vectorization",
        "//tf_keras/layers/preprocessing/benchmarks:feature_column_benchmark",
        "//tf_keras/layers/regularization",
        "//tf_keras/layers/regularization:activity_regularization",
        "//tf_keras/layers/regularization:alpha_dropout",
        "//tf_keras/layers/regularization:dropout",
        "//tf_keras/layers/regularization:gaussian_dropout",
        "//tf_keras/layers/regularization:gaussian_noise",
        "//tf_keras/layers/regularization:spatial_dropout1d",
        "//tf_keras/layers/regularization:spatial_dropout2d",
        "//tf_keras/layers/regularization:spatial_dropout3d",
        "//tf_keras/layers/rnn",
        "//tf_keras/layers/rnn:abstract_rnn_cell",
        "//tf_keras/layers/rnn:base_conv_lstm",
        "//tf_keras/layers/rnn:base_conv_rnn",
        "//tf_keras/layers/rnn:base_cudnn_rnn",
        "//tf_keras/layers/rnn:base_rnn",
        "//tf_keras/layers/rnn:base_wrapper",
        "//tf_keras/layers/rnn:bidirectional",
        "//tf_keras/layers/rnn:cell_wrappers",
        "//tf_keras/layers/rnn:conv_lstm1d",
        "//tf_keras/layers/rnn:conv_lstm2d",
        "//tf_keras/layers/rnn:conv_lstm3d",
        "//tf_keras/layers/rnn:cudnn_gru",
        "//tf_keras/layers/rnn:cudnn_lstm",
        "//tf_keras/layers/rnn:dropout_rnn_cell_mixin",
        "//tf_keras/layers/rnn:gru",
        "//tf_keras/layers/rnn:gru_lstm_utils",
        "//tf_keras/layers/rnn:gru_v1",
        "//tf_keras/layers/rnn:legacy_cell_wrappers",
        "//tf_keras/layers/rnn:legacy_cells",
        "//tf_keras/layers/rnn:lstm",
        "//tf_keras/layers/rnn:lstm_v1",
        "//tf_keras/layers/rnn:rnn_utils",
        "//tf_keras/layers/rnn:simple_rnn",
        "//tf_keras/layers/rnn:stacked_rnn_cells",
        "//tf_keras/layers/rnn:time_distributed",
        "//tf_keras/legacy_tf_layers:convolutional",
        "//tf_keras/legacy_tf_layers:core",
        "//tf_keras/legacy_tf_layers:layers",
        "//tf_keras/legacy_tf_layers:layers_base",
        "//tf_keras/legacy_tf_layers:normalization",
        "//tf_keras/legacy_tf_layers:pooling",
        "//tf_keras/metrics",
        "//tf_keras/mixed_precision:autocast_variable",
        "//tf_keras/mixed_precision:device_compatibility_check",
        "//tf_keras/mixed_precision:loss_scale_optimizer",
        "//tf_keras/mixed_precision:mixed_precision_experimental",
        "//tf_keras/mixed_precision:policy",
        "//tf_keras/mixed_precision:test_util",
        "//tf_keras/models",
        "//tf_keras/models:cloning",
        "//tf_keras/models:sharpness_aware_minimization",
        "//tf_keras/optimizers",
        "//tf_keras/optimizers:legacy_learning_rate_decay",
        "//tf_keras/optimizers:utils",
        "//tf_keras/optimizers/legacy:optimizers",
        "//tf_keras/optimizers/schedules:learning_rate_schedule",
        "//tf_keras/premade_models",
        "//tf_keras/preprocessing",
        "//tf_keras/preprocessing:image",
        "//tf_keras/preprocessing:sequence",
        "//tf_keras/preprocessing:text",
        "//tf_keras/protobuf:projector_config_proto_py_pb2",
        "//tf_keras/protobuf:saved_metadata_proto_py_pb2",
        "//tf_keras/protobuf:versions_proto_py_pb2",
        "//tf_keras/saving",
        "//tf_keras/saving:object_registration",
        "//tf_keras/saving:saving_lib",
        "//tf_keras/saving:serialization",
        "//tf_keras/saving:serialization_lib",
        "//tf_keras/testing_infra:keras_doctest_lib",
        "//tf_keras/testing_infra:test_combinations",
        "//tf_keras/testing_infra:test_utils",
        "//tf_keras/tests:get_config_samples",
        "//tf_keras/tests:model_architectures",
        "//tf_keras/tests:model_subclassing_test_util",
        "//tf_keras/utils",
        "//tf_keras/utils:audio_dataset",
        "//tf_keras/utils:control_flow_util",
        "//tf_keras/utils:data_utils",
        "//tf_keras/utils:dataset_creator",
        "//tf_keras/utils:engine_utils",
        "//tf_keras/utils:feature_space",
        "//tf_keras/utils:generic_utils",
        "//tf_keras/utils:image_dataset",
        "//tf_keras/utils:image_utils",
        "//tf_keras/utils:io_utils",
        "//tf_keras/utils:keras_logging",
        "//tf_keras/utils:kpl_test_utils",
        "//tf_keras/utils:layer_utils",
        "//tf_keras/utils:metrics_utils",
        "//tf_keras/utils:mode_keys",
        "//tf_keras/utils:np_utils",
        "//tf_keras/utils:object_identity",
        "//tf_keras/utils:sidecar_evaluator",
        "//tf_keras/utils:steps_per_execution_tuning",
        "//tf_keras/utils:text_dataset",
        "//tf_keras/utils:tf_contextlib",
        "//tf_keras/utils:tf_inspect",
        "//tf_keras/utils:tf_utils",
        "//tf_keras/utils:timed_threads",
        "//tf_keras/utils:timeseries_dataset",
        "//tf_keras/utils:traceback_utils",
        "//tf_keras/utils:version_utils",
        "//tf_keras/utils:vis_utils",
    ],
)

filegroup(
    name = "static_srcs",
    srcs = ["//:oss_setup.py"],
)

wheel_sources(
    name = "wheel_sources",
    srcs = [
        ":static_srcs",
        ":transitive_py_deps",
    ],
)

tf_keras_wheel(
    name = "tf_keras_wheel",
    py_src_dir = ":wheel_sources",
)

tf_keras_source_package(
    name = "tf_keras_source_package",
    py_src_dir = ":wheel_sources",
)

py_import(
    name = "pypi_tf_keras_py_import",
    wheel = get_pypi_tf_keras_wheel(),
    wheel_deps = [get_pypi_tensorflow_pkg()],
)

py_test(
    name = "pypi_tf_keras_wheel_test",
    srcs = ["tf_keras_wheel_test.py"],
    args = ["--version=%s" % (WHEEL_VERSION + WHEEL_VERSION_SUFFIX)],
    main = "tf_keras_wheel_test.py",
    tags = ["manual"],
    deps = [":pypi_tf_keras_py_import"],
)

py_import(
    name = "pypi_tf_keras_wheel_with_deps",
    wheel = get_pypi_tf_keras_wheel(),
    deps = [
        "@pypi//numpy",
        "@pypi//portpicker",
        "@pypi//scipy",
    ] + [get_pypi_tensorflow_dep()],
)

# TODO(ybaturina): Uncomment once all python transformations are converted to
# Bazel build rules.
# py_import(
#     name = "tf_keras_py_import",
#     wheel = ":tf_keras_wheel",
#     wheel_deps = ["@pypi_tf_nightly//:pkg"],
# )

# py_test(
#     name = "tf_keras_wheel_test",
#     srcs = ["tf_keras_wheel_test.py"],
#     args = ["--version=%s" % (WHEEL_VERSION + WHEEL_VERSION_SUFFIX)],
#     deps = [":tf_keras_py_import"],
#     tags = ["manual"],
# )

# py_import(
#     name = "tf_keras_wheel_with_deps",
#    wheel = ":tf_keras_wheel",
#     deps = [
#         "@pypi//numpy",
#         "@pypi//tf_nightly",
#         "@pypi//portpicker",
#         "@pypi//scipy",
#     ],
# )
